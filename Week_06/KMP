# KMP算法的核心：寻找已经匹配的字符串中的公共最长前后缀

def next_table(pattern):
    n = len(pattern)
    next = [0 for _ in range(n)]
    cur = 0
    for i in range(1, n):
        if pattern[cur] == pattern[i]:
            cur += 1
            next[i] = cur
        else:
            if cur == 0:
                next[i] = cur
            else:
                while cur > 0:
                    cur = next[cur]
                    if pattern[i] == pattern[cur]:
                        break
                next[i] = next[cur]
    return [-1] + next[: -1]

def match(text, pattern, next):
    m = len(text)
    n = len(pattern)
    i, j = 0, 0
    while i < m:
        if text[i] == pattern[j]:
            if j == n - 1:
                return i - n + 1
            i += 1; j += 1
        else:
            j = next[j]
            if j == -1:
                j += 1; i += 1
        
    return -1

pattern = 'abaa'
text = 'ababcabaa'
res = match(text, pattern, next_table(pattern))
print('匹配的起始位置（若不匹配，得到答案为-1）：', res)